#!/bin/bash
if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]|| [ -z $4 ]|| [ -z $5 ] || [ -z $6 ] || [ -z $7 ]
then
   echo "Faltan opciones"
   echo "./Debian_Packages A B C D E F G"
  echo "       A es 1 si se quiere instalar CUDA y además se tiene una tarjeta de video NVIDIA o 0 si no"
  echo "       B es 1 si se quire instalar LATEX para escribir papers o 0 si no"
  echo "       C es 1 si se quiere instalar STEAM para juegos o 0 si no"
  echo "       D es 1 si se quiere el programmer pack (ruby, octave, R, git, mysql, ssh) 0 si no"
  echo "       E es 1 si no se instaló Netbeans ni CUDA y se quiere quitar el otro java de linux (ya que si se instalará el Java de Oracle) o 0 si no se quiere quitar"
  echo "       F es 1 si se quiere instalar Netbeans con Java EE, 2 si se quiere con Java SE, 3 si se quiere con C/C++, 4 si se quiere con HTML5 & PHP, 5 si se quiere el paquete completo o 0 si no"
  echo "       G es 1 si se quiere instalar Spotify y Skype 0 si no"
  exit 1
fi

FILE="/tmp/out.$$"
GREP="/bin/grep"

#Revisar que los parametros sean aceptables
if [ $1 -ne 0 ] && [ $1 -ne 1 ]
then
    echo "Caracter no válido en la opción A"
    exit 1
fi
if [ $2 -ne 0 ] && [ $2 -ne 1 ]
then
    echo "Caracter no válido en la opcion B"
    exit 1
fi
if [ $3 -ne 0 ] && [ $3 -ne 1 ]
then
    echo "Caracter no válido en la opción C"
    exit 1
fi
if [ $4 -ne 0 ] && [ $4 -ne 1 ]
then
    echo "Caracter no válido en la opción D"
    exit 1
fi
if [ $5 -ne 0 ] && [ $5 -ne 1 ]
then
    echo "Caracter no válido en la opción E"
    exit 1
fi
if [ $6 -ne 0 ] && [ $6 -ne 1 ] && [ $6 -ne 2 ] && [ $6 -ne 3 ] && [ $6 -ne 4 ] && [ $6 -ne 5 ]
then
    echo "Caracter no válido en la opción F"
    exit 1
  fi
if [ $7 -ne 0 ] && [ $7 -ne 1 ]
then
    echo "Caracter no válido en la opción G"
    exit 1
fi

# Make sure only root can run our script
if [ "$(id -u)" != "0" ];
then
   echo "¡NECESITAS SER ROOT! No sirve ejecutarlo como sudo"
   exit 1
fi

cd
echo "listo para instalar"

echo "deb http://http.debian.net/debian/ jessie main contrib non-free" >> /etc/apt/sources.list
apt update
apt install firmware-iwlwifi
modprobe -r iwlwifi ; modprobe iwlwifi

##instalas los paquetes que faltan
echo "Instalando paquetes útiles"
apt install -y g++
apt install -y k3b
apt install -y xfce4-xkb-plugin
apt install -y cmake
apt install -y cmake-curses-gui

##Instalar kingsoft, office de linux
echo "Instalando Kingsoft, desinstalando LibreOffice"
apt remove --purge -y libreoffice*
apt clean
apt -y autoremove

wget -O wps-office.deb
http://kdl.cc.ksosoft.com/wps-community/download/a19/wps-office_9.1.0.4975~a19p1_i386.deb
dpkg -i wps-office.deb
apt -f install && rm wps-office.deb
wget -O web-office-fonts.deb
http://kdl.cc.ksosoft.com/wps-community/download/a15/wps-office-fonts_1.0_all.deb
dpkg -i web-office-fonts.deb

##Instalacion de chrome
## https://www.google.com/intl/en/chrome/browser/
echo "Instalando Chrome"
apt install -y libappindicator1
apt install -f -y
apt install -y libcurl3
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
dpkg -i google-chrome-stable_current_amd64.deb

##Quitar los parquetes que no son seguros.
echo "Removiendo paquetes inseguros"
apt remove -y ftp
dpkg -r telnet
dpkg -P telnet
dpkg -r pptp-linux network-manager-pptp network-manager-pptp-gnome
dpkg -P pptp-linux network-manager-pptp
dpkg -r ppp 
dpkg -P ppp 
dpkg -r rsync
dpkg -P rsync
dpkg -r bluez-cups 
dpkg -r printer-driver-postscript-hp
dpkg -r hplip
dpkg -P hplip
dpkg -r printer-driver-hpcups
dpkg -r printer-driver-pxljr
dpkg -r printer-driver-foo2zjs

#Obtener los nombres de los usuarios
ls -1 /home > users

#Variables de ambiente de usuarios
cat users | while read LINE
do
  if [ -s /home/$LINE/.bashrc ]; then
    echo "export JAVA_HOME=/usr/java/default" >> /home/$LINE/.bashrc
    echo "export JAVA_HOME=/usr/java/default" >> /root/.bashrc
    echo "export ANDROID=/home/$LINE/Development/adt-bundle-linux-x86_64-20140702" >> /home/$LINE/.bashrc
    echo "export ANDROID=/home/$LINE/Development/adt-bundle-linux-x86_64-20140702" >> /root/.bashrc
    fi
done

# variables de ambiente de root
if [ $1 -eq 1 ] # Si CUDA
then
  echo "export PATH=\$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/cuda/bin:\$ANDROID/eclipse:\$ANDROID/sdk/platform-tools" >> /root/.bashrc
  echo "export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/local/cuda/lib64:/lib32:/usr/lib32" >> /root/.bashrc
else
  echo "export PATH=\$JAVA_HOME/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:\$ANDROID/eclipse:\$ANDROID/sdk/platform-tools" >> /root/.bashrc
  echo "export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/lib32:/usr/lib32" >> /root/.bashrc
fi

echo "export CLASSPATH=\$JAVA_HOME/jre/lib/rt.jar:." >> /root/.bashrc
source /root/.bashrc

rm users

# para OpenGL y CUDA
apt install -y freeglut3
apt install -y freeglut3-dev

if [ $1 -eq 1 ] # si CUDA
then
  echo "Chingadera que nunca sirve"
  ##usamos ubuntu ya que no existe uno especifico de debian y ubuntu es lo mas acercado que tenemos.
  #wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1204/x86_64/cuda-repo-ubuntu1204_5.5-0_amd64.deb
  #dpkg -i cuda-repo-ubuntu1204_5.5-0_amd64.deb
  #apt update
  #apt-cache search cuda

  #apt install -y cuda
  #rm cuda-repo-ubuntu1204_5.5-0_amd64.deb
fi

nvcc --version

if [ $2 -eq 1 ] # si se quiere LATEX
then
  #Instalacion de LATEX -- Esta parte dura bastante, se descargan cerca de 2GB
  apt install -y texlive-full
  apt install -y texmaker
fi

if [ $3 -eq 1 ] # si se quiere STEAM ]
then
  apt install -y curl
  apt install -y aptitude
  dpkg --add-architecture i386
  aptitude update
  aptitude install -y steam
  ##Genera problemas con Gnome, como que lo mata
  #if nvidia-detect
  #then
    # aptitude install -y libgl1-nvidia-glx:i386
  #else
     #aptitude install -y libgl1-fglrx-glx:i386
  #fi
fi

if [ $4 -eq 1 ] #Si instalamos ruby, python y R
then
    apt install -y git
    apt install -y git-core
    apt install -y build-essential
    apt install -y libssl-dev
    apt install -y libreadline-dev
    apt install -y libyaml-dev
    apt install -y libsqlite3-dev
    apt install -y sqlite3
    apt install -y libxml2-dev
    apt install -y libxslt1-dev
    apt install -y libcurl4-openssl-dev
    apt install -y python-software-properties libffi-dev
    
    ##Instalacion de RVM
    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
    \curl -sSL https://get.rvm.io | bash -s stable --ruby    
    \curl -sSL https://get.rvm.io | bash -s stable --rails

    #Instalacion de NVM
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
    source ~/.bashrc
    nvm install v6.9.4
    
    ## instalacion postgres
    sudo sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
    wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
    sudo apt update
    sudo apt install postgresql-common
    sudo apt install postgresql-9.6 libpq-dev

    ##instalacion sshd
    apt install -y openssh-server

    ##Instalacion de R
    apt install -y r-base

    ##instalacion de gnuplot
    apt install -y gnuplot

    ##instalacion de octave
    apt install -y octave

    ##instalacion wireshark
    aptitude install -y wireshark
    dpkg -i wireshark-common_2.0.5.0-1_i386.deb wireshark_wireshark-2.0.5.0-1_i386.deb

    ##Desinstalar gedit, instalar atom
    apt remove -y gedit
    wget https://atom.io/download/deb
    dpkg -i deb
fi

# Desinstalar Java
if [ $5 -eq 1 ]
then
  dpkg -r --force-depends openjdk-7-jre openjdk-7-jre-headless
  dpkg -r tzdata-java
  dpkg -r --force-depends java-common default-jre default-jre-headless openjdk-7-jre-headless
  dpkg -r icedtea-7-jre-jamvm
  dpkg -P --force-depends openjdk-7-jre-headless java-common
  dpkg -r --force-depends libservlet3.0-java ca-certificates-java libatk-wrapper-java libatk-wrapper-java-jni libhsqldb1.8.0-java
  dpkg -P  ca-certificates-java libatk-wrapper-java-jni
  dpkg -r libreoffice-sdbc-hsqldb
fi

# Instalar Java
echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" | tee /etc/apt/sources.list.d/webupd8team-java.list
echo "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" | tee -a /etc/apt/sources.list.d/webupd8team-java.list
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886
apt-get update
apt-get install -y oracle-java8-installer
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
apt-get install -y oracle-java8-set-default

java -version
javac -version

# cerrar servicios
apt-get install -y nmap
nmap -sTU localhost
service avahi-daemon stop
service cups-browsed stop
service cups stop
systemctl stop avahi-daemon.service
systemctl stop avahi-daemon.socket
systemctl disable avahi-daemon.service
systemctl disable avahi-daemon.socket
systemctl stop cups.path
systemctl stop cups-browsed.service
systemctl stop cups.service
systemctl stop cups.socket
systemctl disable cups.path
systemctl disable cups-browsed.service
systemctl disable cups.service
systemctl disable cups.socket
echo "manual" >> /etc/init/avahi-daemon.override
echo "manual" >> /etc/init/cups-browsed.override
echo "manual" >> /etc/init/cups.override

# otros paquetes:
if [ $6 -eq 5 ] # si se quiere netbeans
then
  apt-get install -y gdb
  apt-get install -y qmake

  wget http://download.netbeans.org/netbeans/8.0.2/final/bundles/netbeans-8.0.2-linux.sh
z
  chmod +x netbeans-8.0.2-linux.sh
  sh netbeans-8.0.2-linux.sh
  rm netbeans-8.0.2-linux.sh
fi

if [ $6 -eq 4 ] # si se quiere netbeans
then
  apt-get install -y cmake
  apt-get install -y gdb
  apt-get install -y qmake

  wget http://download.netbeans.org/netbeans/8.0.2/final/bundles/netbeans-8.0.2-php-linux.sh
  chmod +x netbeans-8.0.2-php-linux.sh
  sh netbeans-8.0.2-php-linux.sh
  rm netbeans-8.0.2-php-linux.sh
fi

if [ $6 -eq 3] # si se quiere netbeans
then
  apt-get install -y cmake
  apt-get install -y gdb
  apt-get install -y qmake

  wget http://download.netbeans.org/netbeans/8.0.2/final/bundles/netbeans-8.0.2-linux.sh

  chmod +x netbeans-8.0.2-cpp-linux.sh
  sh netbeans-8.0.2-cpp-linux.sh
  rm netbeans-8.0.2-cpp-linux.sh
fi

if [ $6 -eq 2 ] # si se quiere netbeans
then
  apt-get install -y cmake
  apt-get install -y gdb
  apt-get install -y qmake

  wget http://download.netbeans.org/netbeans/8.0.2/final/bundles/netbeans-8.0.2-linux.sh

  chmod +x netbeans-8.0.2-javase-linux.sh
  sh netbeans-8.0.2-javase-linux.sh
  rm netbeans-8.0.2-javase-linux.sh
fi

if [ $6 -eq 1 ] # si se quiere netbeans
then
  apt-get install -y cmake
  apt-get install -y gdb
  apt-get install -y qmake

  wget http://download.netbeans.org/netbeans/8.0.2/final/bundles/netbeans-8.0.2-linux.sh

  chmod +x netbeans-8.0.2-javaee-linux.sh
  sh netbeans-8.0.2-javaee-linux.sh
  rm netbeans-8.0.2-javaee-linux.sh
fi

apt-get install -y libc6:i386
apt-get install -y libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386
wget http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip
unzip adt-bundle-linux-x86_64-20140702.zip

ls -1 /home > users
cat users | while read LINE
do
  mkdir /home/$LINE/Development
  mv adt-bundle-linux-x86_64-20140702 /home/$LINE/Development
  chown -R $LINE.$LINE /home/$LINE/Development
done
rm -rf adt-bundle-linux-x86_64-20140702.zip
rm users

if [ $7 -eq 1 ]
then
   ##Instalar spotify
   echo deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list
   apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D2C19886
   apt update
   apt install -y spotify-client
   wget http://mirrors.ocf.berkeley.edu/tanglu/pool/main/libg/libgcrypt11/libgcrypt11_1.5.4-3_amd64.deb
   dpkg -i libgcrypt11_1.5.4-3_amd64.deb
   rm libgcrypt11_1.5.4-3_amd64.deb

   ##Instalar skype
   dpkg --add-architecture i386
   aptitude update
   aptitude install -y libc6:i386 libqt4-dbus:i386 libqt4-network:i386 libqt4-xml:i386 libqtcore4:i386 libqtgui4:i386 libqtwebkit4:i386 libstdc++6:i386 libx11-6:i386 libxext6:i386 libxss1:i386 libxv1:i386 libssl1.0.0:i386 libpulse0:i386 libasound2-plugins:i386
   wget -O skype-install.deb http://www.skype.com/go/getskype-linux-deb
   dpkg -i skype-install.deb
   rm skype-install.deb
fi

##Para configurar el brillo de la pantalla
#hace overwrite del archivo completo...
#echo 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash acpi_osi=Linux acpi_blacklight=vendor"' > /etc/default/grub
#echo 'GRUB_CMDLINE_LINUX="acpi_backlight=vendor"' > /etc/default/grub

##update-grub
apt autoremove -y
apt clean
clear

echo "-----------------¡IMPORTANTE!----------------------"
echo "Para configurar mysql se necesitan correr los siguientes pasos en root:"
echo "     sudo -u postgres createuser NombreDeUsuario -s"
echo "     sudo -u postgres psql"
echo "     dentro de la terminal postgres:"
echo "     postgres=# \password NombreDeUsuario"
echo "     Y para salir solo se utiliza \q"
echo " "
echo "NOTA: para crear el archivo vimrc (que sirve para configurar vim de manera amigable) seguir los pasos: "
echo "      cd ~/"
echo "      vim .vimrc"
echo "Esto creara una carpeta llamada vim dentro de ~/"
echo "Dentro de la liga https://github.com/shiro-saber/Vim"
echo "Se encuentra un ejemplo de un archivo vimrc, es importante que si se utiliza, se baje tambien la carpeta de colors"
echo "Ya que aqui se encuentra el color scheme que se utiliza"
## echo "Para que la configuracion del brillo de la computadora, se requiere un reinicio"
